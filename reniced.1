.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RENICED 1"
.TH RENICED 1 "2007-08-05" "1.17" "reniced"
.SH "NAME"
reniced \- renice running processes based on regular expressions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBreniced\fR
[\fB\-h\fR]
[\fB\-v\fR]
[\fIconfigfile\fR]
.SH "OVERVIEW"
.IX Header "OVERVIEW"
reniced takes a list of regular expressions, looks for processes (and
threads) matching them and renices the processes to given values.
reniced can also change io priorities.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
On start, reniced reads a configuration file.  It consists of nice
values and regular expressions.
.PP
It then scans the process table using the \fIps\fR\|(1) command.
Whenever a process name from the \s-1CMD\s0 column matches a regular
expression, that process is reniced to the given value.  If a process
matches multiple regular expressions, all rule matches are executed in
order and the last match wins.
.PP
When run as root, reniced will scan all processes (\f(CW`ps H \-e`\fR).
When run as a user, renice only scans the user's processes (\f(CW`ps H \-\-user`\fR).
.Sh "Switches"
.IX Subsection "Switches"
.IP "\fB\-h\fR" 5
.IX Item "-h"
This prints the version number and a short help text.
.IP "\fB\-v\fR" 5
.IX Item "-v"
This activates verbose mode.  Error messages, some statistics and all
renice actions are printed to stdout.
.IP "\fIconfigfile\fR" 5
.IX Item "configfile"
This reads the regular expressions from an alternate configfile.
.Sp
The default location of the configfile is \f(CW\*(C`/etc/reniced.conf\*(C'\fR if reniced
is run as root, \f(CW\*(C`~/.reniced\*(C'\fR otherwise.
.Sh "Configuration file format"
.IX Subsection "Configuration file format"
The configuration file is composed of single lines.  Empty lines and
lines starting with a \fB#\fR are ignored.
.PP
Every line must consist of a command followed by a whitespace and a
Perl regular expression.
.PP
The command consists of a nice value, an io prority or both.  A nice
value is given as a decimal, usually within the range of \-20 to 19.
An io priority consists of the scheduling class (\fBr\fR for realtime,
\&\fBb\fR for best-effort and \fBi\fR for idle) optionally followed by the
class data (typically 0\-7, lower being higher priority).
.PP
\fIExamples\fR
.IX Subsection "Examples"
.IP "\fI5 ^bash\fR" 5
.IX Item "5 ^bash"
gives currently running bash shells a nice value of 5
.IP "\fIb2 ^tar\fR" 5
.IX Item "b2 ^tar"
sets currently running to io priority best-effort within class 2
.IP "\fIi torrent\fR" 5
.IX Item "i torrent"
sets currently running torrent-like applications to io priority idle
.IP "\fI\-10r4 seti\fR" 5
.IX Item "-10r4 seti"
gives currently running seti-processes a nice value of \-10 and sets
them to realtime io priority in class 4
.SH "MODULES NEEDED"
.IX Header "MODULES NEEDED"
.Vb 1
\& use BSD::Resource;
.Ve
.Sp
This module can be obtained from <http://www.cpan.org>.
.SH "PROGRAMS NEEDED"
.IX Header "PROGRAMS NEEDED"
.Vb 1
\& ionice
.Ve
.Sp
ionice is only needed if you want to change io priority.  It can be
obtained from <http://rlove.org/schedutils/>.
.Sp
You also need a suitable kernel and scheduler, e.g. Linux 2.6 with
\&\s-1CFQ\s0.
.SH "BUGS"
.IX Header "BUGS"
reniced can run without the BSD::Resource module.  In this case, the
\&\s-1PRIO_PROCESS\s0 is set to 0.  This works on Linux 2.6.11 i686 but it
could break on other systems.  Installing BSD::Resource is the safer
way.
.Sp
Be careful using realtime priorities, don't starve other tasks.
.Sp
Please report bugs to <\fImitch@cgarbs.de\fR>.
.SH "AUTHOR"
.IX Header "AUTHOR"
reniced was written by Christian Garbs <\fImitch@cgarbs.de\fR>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
reniced is Copyright (C) 2005,2007 by Christian Garbs.  It is licensed
under the \s-1GNU\s0 \s-1GPL\s0.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
Look for updates ad <http://www.cgarbs.de/stuff.en.html>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIionice\fR\|(1), \fIrenice\fR\|(1)
